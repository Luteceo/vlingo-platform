import groovy.json.*
import groovy.xml.XmlUtil

plugins {
  id 'org.ajoberstar.grgit' version '1.7.2'
}

ext.githubUri = 'https://github.com/vlingo/'
ext.checkoutDir = '../'

// this is the central desired version configuration for the vlingo platform
ext.repos = [
  'vlingo-common': [version: '0.3.4'],
  'vlingo-actors': [version: '0.4.7'],
  'vlingo-wire': [version: '0.3.5'],
  'vlingo-cluster': [version: '0.3.5'],
  'vlingo-directory': [version: '0.5.3'],
  'vlingo-http': [version: '0.3.6'],
  'vlingo-auth': [version: '0.3.6'],
  'vlingo-symbio': [version: '0.2.2'],
  'vlingo-maven-plugin': [version: '0.2.3'],
]

// simple run gradle or ./gradlew
defaultTasks 'sync'

// first do this
task checkout {
  description 'checkout or update all vlingo repositories (commit changes to the repos beforehand)'

  doLast {
    repos.each { repo, _config ->
      cloneOrPull repo
    }
  }
}

// then that
task syncVersions {
  description 'synchronizes the repos and their dependency versions'

  doLast {
    repos.each { repo, config ->
      replaceVersionInTextFor repo, config
      syncPomVersionsFor repo, config, repos
    }
  }
}

// default umbrella task
task sync(dependsOn: [
  checkout,
  syncVersions,
]) {
  description 'perform all maintenance actions at once'
}

def cloneOrPull(repo) {
      def grgit

      def dir = "$checkoutDir$repo"
      def uri = "$githubUri$repo"

      if (!file(dir).exists()) {
        println "Cloning $uri into $dir"
        grgit = org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: uri)
      } else {
        println "Pulling $uri into $dir"
        grgit = org.ajoberstar.grgit.Grgit.open(dir: dir)
        grgit.pull()
      }

      def lastCommit = new JsonBuilder(grgit.log(maxCommits: 1).last()).toPrettyString()
      println "Last commit: $lastCommit"

}

def replaceVersionInTextFor(repo, config) {
  def dir = "$checkoutDir$repo"
  def replacementSets = [
    [name: 'README.md', versionRegex: /(<version>)(\S+)(<\/version>)/, replacement: "\\1${config.version}\\3"],
    [name: 'README.md', versionRegex: /(compile.*\:)(\S+)(\')/, replacement: "\\1${config.version}\\3"],
    [name: 'bintray.json', versionRegex: /(\s*\"version\":\s*\{\s*\"name\"\s*\:\s*\")(\S+)(\")/, replacement: "\\1${config.version}\\3"],
    [name: 'bintray.json', versionRegex: /(${repo}\/)(\S+)(\/)/, replacement: "\\1${config.version}\\3"],
    [name: 'bintray.json', versionRegex: /(${repo}-)(\S+)(\.)/, replacement: "\\1${config.version}\\3"],
  ]

  replacementSets.each { repl ->
    def path = "$dir/$repl.name"
    println "Syncing $path to $config.version. Regex: ${repl.versionRegex}"

    // simple regex replacements
    ant.replaceregexp(
      match: repl.versionRegex,
      replace: repl.replacement,
      encoding: 'UTF-8',
      flags: 'g') {
        fileset(dir: dir) {
            include(name: repl.name)
        }
    }
  }
}

def syncPomVersionsFor(repo, config, repos) {
  def pom = "$checkoutDir${repo}/pom.xml"
  def xml = file(pom).text
  def root = new XmlParser().parseText(xml)
 
  // sync the library version
  root.version[0].value = config.version

  // sync the dependencies versions
  repos.each { name, dependency ->
    root.dependencies.dependency
      .findAll { it.artifactId.text() == name }
      .each {
        def oldVersion = it.version[0].text()
        def newVersion = dependency.version
        if( oldVersion != newVersion ) {
          println "changing dependency ${it.artifactId.text()}: ${oldVersion} -> ${newVersion}"
          it.version[0].value = newVersion
        }
      }
  }
 
  def writer = new XmlNodePrinter(new PrintWriter(file(pom)))
  writer.preserveWhitespace = true
  writer.print(root)
}