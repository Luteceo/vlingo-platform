import groovy.json.*

plugins {
  id 'org.ajoberstar.grgit' version '1.7.2'
}

ext.repos = [
  [dir: '../vlingo-common', uri: 'https://github.com/vlingo/vlingo-common.git', version: '0.3.3'],
  [dir: '../vlingo-actors', uri: 'https://github.com/vlingo/vlingo-actors.git', version: '0.4.5'],
  [dir: '../vlingo-auth', uri: 'https://github.com/vlingo/vlingo-auth.git', version: '0.3.4'],
  [dir: '../vlingo-cluster', uri: 'https://github.com/vlingo/vlingo-cluster.git', version: '0.3.3'],
  [dir: '../vlingo-directory', uri: 'https://github.com/vlingo/vlingo-directory.git', version: '0.5.3'],
  [dir: '../vlingo-http', uri: 'https://github.com/vlingo/vlingo-http.git', version: '0.3.3'],
  [dir: '../vlingo-maven-plugin', uri: 'https://github.com/vlingo/vlingo-maven-plugin.git', version: '0.2.2'],
  [dir: '../vlingo-wire', uri: 'https://github.com/vlingo/vlingo-wire.git', version: '0.3.4'],
]

// simple run gradle or ./gradlew
defaultTasks 'sync'

// first do this
task checkout {
  description 'checkout or update all vlingo repositories'

  doLast {
    repos.each { repo ->
      cloneOrPull repo
    }
  }
}

// then that
task syncVersions {
  description 'synchronizes the repo and dependency versions'

  doLast {
    repos.each { repo ->
      replaceVersionIn repo
    }
  }
}

task sync(dependsOn: [
  checkout,
  syncVersions,
]) {
  description 'perform all maintenance actions at once'
}

def cloneOrPull(repo) {
      def grgit

      def dir = repo.dir
      def uri = repo.uri

      if (!file(dir).exists()) {
        println "Cloning $uri into $dir"
        grgit = org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: uri)
      } else {
        println "Pulling $uri in $dir"
        grgit = org.ajoberstar.grgit.Grgit.open(dir: dir)
        grgit.pull()
      }

      def lastCommit = new JsonBuilder(grgit.log(maxCommits: 1).last()).toPrettyString()
      println "Last commit: $lastCommit"

}

def replaceVersionIn(repo) {
  def dir = repo.dir
  def replSets = [
    [name: 'README.md', versionMatch: /(.)/]
  ]

  replSets.each { repl ->
    def path = "$dir/$repl.name"
    println "Syncing $path to $repo.version"

    ant.replaceregexp(
      match: /(.)/, //todo
      replace: "\\1", //todo
      encoding: 'UTF-8',
      flags: 'g') {
        fileset(dir: dir) {
            include(name: 'README.md')
        }
    }
  }
}
